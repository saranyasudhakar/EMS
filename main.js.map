{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/addemp/addemp.component.html","webpack:///./src/app/addemp/addemp.component.ts","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/constants/message.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/login/login.model.ts","webpack:///./src/app/models/emp.model.ts","webpack:///./src/app/models/employee.model.ts","webpack:///./src/app/notfound.component.ts","webpack:///./src/app/register/reg.component.html","webpack:///./src/app/register/reg.component.ts","webpack:///./src/app/register/reg.model.ts","webpack:///./src/app/roles/role.component.html","webpack:///./src/app/roles/role.component.ts","webpack:///./src/app/roles/role.model.ts","webpack:///./src/app/services/admin.service.ts","webpack:///./src/app/update/update.component.html","webpack:///./src/app/update/update.component.ts","webpack:///./src/app/users/users.component.html","webpack:///./src/app/users/users.component.ts","webpack:///./src/app/view/view.component.html","webpack:///./src/app/view/view.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n<h1 style=\\\"color:green\\\" class='text-center'>Create Employee</h1>\\n     <div class=\\\"panel panel-success\\\">\\n         <div class=\\\"panel-heading\\\">\\n            <h3> Employee Form</h3>\\n         </div>\\n        <div class=\\\"panel-body\\\">\\n        <form #empForm=\\\"ngForm\\\" novalidate>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                        <div class=\\\"form-group\\\">\\n                                \\n                                 <label for='userId' class=\\\"control-label\\\">UserId</label>\\n                                 <input type=\\\"text\\\" \\n                                        placeholder=\\\"userId\\\" \\n                                        name=\\\"userId\\\"\\n                                        id=\\\"userId\\\"\\n                                        class=\\\"form-control\\\"\\n                                        [(ngModel)]=\\\"empObj.userId\\\"\\n                                 >\\n                                \\n                            </div>\\n                        </div> \\n                        <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                        \\n                                         <label for='jobTitleName' class=\\\"control-label\\\">JobTitleName</label>\\n                                         <input type=\\\"text\\\" \\n                                                placeholder=\\\"jobTitleName\\\" \\n                                                name=\\\"jobTitleName\\\"\\n                                                id=\\\"jobTitleName\\\"\\n                                                class=\\\"form-control\\\"\\n                                                [(ngModel)]=\\\"empObj.jobTitleName\\\"\\n                                         >\\n                                        \\n                                    </div>\\n                                </div> \\n                            </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\" [class.has-error]=\\\"firstname.invalid\\\">\\n                <label for='firstName' class=\\\"control-label\\\">FirstName</label>\\n                <input type=\\\"text\\\" \\n                       placeholder=\\\"firstName\\\" \\n                       name=\\\"firstName\\\"\\n                       id=\\\"firstName\\\"\\n                       required\\n                       class=\\\"form-control\\\"\\n                       [ngModel]=\\\"empObj.firstName\\\"\\n                       (ngModelChange)=\\\"fisrtToUpper($event)\\\"\\n                       #firstname=\\\"ngModel\\\"\\n                >\\n                <div class=\\\"alert alert-danger\\\" *ngIf = \\\"firstname.invalid\\\">\\n                     FirstName is Required\\n                </div>\\n                 \\n            </div>\\n        </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"col-md-6\\\">\\n                 <label for='lasttName' class=\\\"control-label\\\">LastName</label>\\n                 <input type=\\\"text\\\" \\n                        placeholder=\\\"lastName\\\" \\n                        name=\\\"lasttName\\\"\\n                        id=\\\"lastName\\\"\\n                        class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"empObj.lastName\\\"\\n                 >\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n                \\n            <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                    \\n                     <label for='preferredFullName' class=\\\"control-label\\\">PrefferedFullName</label>\\n                     <input type=\\\"text\\\" \\n                            placeholder=\\\"preferredFullName\\\" \\n                            name=\\\"preferredFullName\\\"\\n                            id=\\\"preferredFullName\\\"\\n                            class=\\\"form-control\\\"\\n                            [(ngModel)]=\\\"empObj.preferredFullName\\\"\\n                     >\\n                    \\n                </div>\\n            </div> \\n            <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group\\\">\\n                            \\n                             <label for='employeeCode' class=\\\"control-label\\\">EmployeeCode</label>\\n                             <input type=\\\"text\\\" \\n                                    placeholder=\\\"employeeCode\\\" \\n                                    name=\\\"employeeCode\\\"\\n                                    id=\\\"employeeCode\\\"\\n                                    class=\\\"form-control\\\"\\n                                    [(ngModel)]=\\\"empObj.employeeCode\\\"\\n                             >\\n                            \\n                        </div>\\n                    </div> \\n            </div>\\n            <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-6\\\">\\n                            <div class=\\\"form-group\\\">\\n                                    \\n                                     <label for='region' class=\\\"control-label\\\">Region</label>\\n                                     <input type=\\\"text\\\" \\n                                            placeholder=\\\"region\\\" \\n                                            name=\\\"region\\\"\\n                                            id=\\\"region\\\"\\n                                            class=\\\"form-control\\\"\\n                                            [(ngModel)]=\\\"empObj.region\\\"\\n                                     >\\n                                    \\n                                </div>\\n                            </div> \\n                            <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                            \\n                                             <label for='phoneNumber' class=\\\"control-label\\\">PhoneNo</label>\\n                                             <input type=\\\"text\\\" \\n                                                    placeholder=\\\"phoneNumber\\\" \\n                                                    name=\\\"phoneNumber\\\"\\n                                                    id=\\\"phoneNumber\\\"\\n                                                    class=\\\"form-control\\\"\\n                                                    [(ngModel)]=\\\"empObj.phoneNumber\\\"\\n                                             >\\n                                            \\n                                        </div>\\n                                    </div> \\n            </div>\\n            <div class=\\\"row\\\">\\n                    <div class=\\\"col-md-6\\\">\\n                            <div class=\\\"form-group\\\" [class.has-error]=\\\"email.invalid && email.touched\\\">\\n                                <label for='emailAddress' class=\\\"control-label\\\">Email</label>\\n                                <input type=\\\"text\\\" \\n                                       placeholder=\\\"emailAddress\\\" \\n                                       name=\\\"emailAddress\\\"\\n                                       id=\\\"emailAddress\\\"\\n                                       class=\\\"form-control\\\"\\n                                       [(ngModel)]=\\\"empObj.emailAddress\\\"\\n                                       pattern =\\\"^([a-zA-Z0-9]+)@([a-zA-Z0-9]+)\\\\.([a-zA-z]{2,5})$\\\"\\n                                       #email=\\\"ngModel\\\"\\n                                >\\n                                <div class=\\\"alert alert-danger\\\" *ngIf=\\\"email.invalid && email.touched\\\" >\\n                                        Please enter valid pattern\\n                                   </div>\\n                            </div>\\n                        </div>\\n            </div>\\n            \\n                    <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-1 \\\" >\\n                              <button type=\\\"submit\\\" \\n                                      class=\\\"btn btn-success\\\" \\n                                     [disabled]=\\\"!empForm.form.valid\\\" \\n                                     *ngIf=\\\"!employeeService.enableButton\\\" \\n                                     (click)=\\\"submit()\\\">Submit</button></div>\\n                                <div class=\\\"col-md-1\\\">     \\n                              <button type=\\\"submit\\\" \\n                                      class=\\\"btn btn-success\\\" \\n            \\n                                      (click)=\\\"save(empObj)\\\">Save</button>\\n                                    </div>\\n                      <div class=\\\"col-md-1 \\\" >\\n                        <button type=\\\"submit\\\" \\n                        class=\\\"btn btn-success\\\"\\n                        >\\n                        Create\\n                </button></div>\\n                           \\n                          </div>\\n                        \\n                \\n        </form>\\n        </div>\\n     </div>\\n\\n\\n\\n\\n\\n\\n\\n\\n<!--<h1 style=\\\"color:green\\\" class='text-center'>Create Employee</h1>\\n     <div class=\\\"panel panel-success\\\">\\n         <div class=\\\"panel-heading\\\">\\n            <h3> Employee Form</h3>\\n         </div>\\n        <div class=\\\"panel-body\\\">\\n        <form #form=\\\"ngForm\\\" novalidate (submit)=\\\"submitForm(form)\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\" [class.has-error]=\\\"firstname.invalid\\\">\\n                <label for='firstName' class=\\\"control-label\\\">FirstName</label>\\n                <input type=\\\"text\\\" \\n                       placeholder=\\\"firstName\\\" \\n                       name=\\\"firstName\\\"\\n                       id=\\\"firstName\\\"\\n                       required\\n                       class=\\\"form-control\\\"\\n                       [ngModel]=\\\"model.firstName\\\"\\n                       (ngModelChange)=\\\"fisrtToUpper($event)\\\"\\n                       #firstname=\\\"ngModel\\\"\\n                >\\n                <div class=\\\"alert alert-danger\\\" *ngIf = \\\"firstname.invalid\\\">\\n                     FirstName is Required\\n                </div>\\n                 \\n            </div>\\n        </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"col-md-6\\\">\\n                 <label for='lasttName' class=\\\"control-label\\\">LastName</label>\\n                 <input type=\\\"text\\\" \\n                        placeholder=\\\"lastName\\\" \\n                        name=\\\"lasttName\\\"\\n                        id=\\\"lastName\\\"\\n                        class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"model.lastName\\\"\\n                 >\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\" [class.has-error]=\\\"email.invalid && email.touched\\\">\\n                    <label for='email' class=\\\"control-label\\\">Email</label>\\n                    <input type=\\\"text\\\" \\n                           placeholder=\\\"email\\\" \\n                           name=\\\"email\\\"\\n                           id=\\\"email\\\"\\n                           class=\\\"form-control\\\"\\n                           [(ngModel)]=\\\"model.email\\\"\\n                           pattern =\\\"^([a-zA-Z0-9]+)@([a-zA-Z0-9]+)\\\\.([a-zA-z]{2,5})$\\\"\\n                           #email=\\\"ngModel\\\"\\n                    >\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"email.invalid && email.touched\\\" >\\n                            Please enter valid pattern\\n                       </div>\\n                </div>\\n            </div>\\n                <div class=\\\"form-group\\\" [class.has-error]=\\\"password.invalid && password.touched\\\">\\n                    <div class=\\\"col-md-6\\\">\\n                     <label for='password' class=\\\"control-label\\\">Password</label>\\n                     <input type=\\\"password\\\" \\n                            placeholder=\\\"password\\\" \\n                            name=\\\"password\\\"\\n                            id=\\\"password\\\"\\n                            class=\\\"form-control\\\"\\n                            minlength= 5\\n                            [(ngModel)]=\\\"model.password\\\"\\n                            #password=\\\"ngModel\\\"\\n                     >\\n                     <div class=\\\"alert alert-danger\\\" *ngIf = \\\"password.invalid && password.touched\\\">\\n                           Minimum length must be 5\\n                       </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"radio\\\">\\n                <label>\\n                    <input type=\\\"radio\\\"\\n                            name=\\\"gender\\\"\\n                            value=\\\"female\\\"\\n                            [(ngModel)]=\\\"model.gender\\\">\\n                            Female\\n                </label>\\n            </div>\\n            <div class=\\\"radio\\\">\\n                    <label>\\n                        <input type=\\\"radio\\\"\\n                                name=\\\"gender\\\"\\n                                value=\\\"Male\\\"\\n                                [(ngModel)]=\\\"model.gender\\\">\\n                                Male\\n                    </label>\\n                </div>\\n                <div class=\\\"checkbox\\\">\\n                        <label>\\n                            <input type=\\\"checkbox\\\"\\n                                    name=\\\"fullTime\\\"\\n                                    [(ngModel)]=\\\"model.fullTime\\\" >\\n                    \\n                                    FullTime\\n                        </label>\\n                    </div>\\n                    <div class=\\\"form-group\\\" [class.has-error]=\\\"hasCodelangError\\\">\\n                        <label for=\\\"codelang\\\" class=\\\"control-label\\\">Codelang</label>\\n                        <select class=\\\"form-control\\\"\\n                                name=\\\"codelang\\\"\\n                                id=\\\"codelang\\\"\\n                                (blur)=\\\"validateCodeLang($event)\\\"\\n                                [(ngModel)]=\\\"model.codelang\\\">\\n                           <option value=\\\"default\\\">\\n                               Please Select Lang\\n                           </option>     \\n                           <option *ngFor=\\\"let lang of languages\\\">\\n                              {{ lang }}</option> \\n                           \\n                        </select>\\n                        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"hasCodelangError\\\">\\n                            Please Select Valid Input\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                            <div class=\\\"col-sm-12 pull-right\\\" >\\n                              <button type=\\\"submit\\\" \\n                                      class=\\\"btn btn-primary\\\" \\n                                     [disabled]=\\\"!empForm.form.valid\\\" \\n                                     *ngIf=\\\"!employeeService.enableButton\\\" \\n                                     (click)=\\\"submit()\\\">Submit</button>\\n                              <button type=\\\"submit\\\" \\n                                      class=\\\"btn btn-primary\\\" \\n                                      *ngIf=\\\"employeeService.enableButton\\\" \\n                                      (click)=\\\"save(empObj)\\\">Save</button>\\n                            </div>\\n                          </div>\\n                        \\n                <button type=\\\"submit\\\" \\n                        class=\\\"btn btn-success\\\"\\n                        [disabled]=\\\"disableSubmit\\\">\\n                        Create\\n                </button>\\n        </form>\\n        </div>\\n     </div>-->\"","import { Component } from '@angular/core';\nimport {NgForm} from '@angular/forms';\nimport { Employee } from '../models/emp.model';\nimport { AdminService } from '../services/admin.service';\nimport { Router, ActivatedRoute } from '../../../node_modules/@angular/router';\nimport { MESSAGE } from '../constants/message';\n\n\n@Component({\n\n    templateUrl: 'addemp.component.html'\n\n})\nexport class AddEmpComponent {\n  public empObj:Employee;\n  public showAlertMessage:boolean=false;\n  constructor(public employeeService: AdminService,\n              private router:Router,\n              private route:ActivatedRoute) {\n   }\n\n  ngOnInit(){\n\n    this.empObj = new Employee('Jmethew','Developer','Jhon','Methew','JhonMethew','E1','CA',34567671,'abc@aa.com');\n    this.employeeService.copyEvent.subscribe(\n      (rcvEmpObj:Employee)=>{\n        this.empObj=rcvEmpObj;\n      }\n    )\n  }\n\n  public updateRecord :boolean =false;\n  submit(){\n    this.employeeService.getEmployees.push(this.empObj);\n  }\n\n  save(updatedEmp:Employee){\n    console.log(\"Updated Record ::\"+JSON.stringify(updatedEmp));\n    this.employeeService.getEmployees[this.employeeService.shareIndex]=updatedEmp;\n    this.employeeService.showAlertMessage=true;\n    this.employeeService.alertMessage=MESSAGE.update;\n  }\n \n    \n   /* model = new Employee('Jmethew','Developer','Jhon','Methew','JhonMethew','E1','CA',34567,'abc@aa.com');*/\n   \n    fisrtToUpper(value: string): void{\n\n        if(value.length>0){\n            this.empObj.firstName = value.charAt(0).toUpperCase() + value.slice(1);\n\n        }\n        else{\n            this.empObj.firstName = value;\n        }\n    }\n }\n    \n    \n   \n","module.exports = \"\"","import { Component } from '@angular/core';\n\n\n@Component({\n  /*selector: 'login-comp',*/\n  templateUrl:'./admin.component.html'\n})\nexport class AdminComponent {\n}\n","module.exports = \"\\n<div>\\n        <nav class=\\\"navbar navbar-inverse\\\">\\n                <div class=\\\"container-fluid\\\">\\n                  <div class=\\\"navbar-header\\\">\\n                    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Employee Management</a>\\n                  </div>\\n                  <ul class=\\\"nav navbar-nav\\\">\\n                      \\n                    <li class=\\\"active\\\"><a [routerLink]=\\\"['/home']\\\">Home</a></li>\\n                    <li class=\\\"dropdown\\\"><a class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\">Admin \\n                            <span class=\\\"caret\\\"></span></a>\\n                      <ul class=\\\"dropdown-menu\\\">\\n                        \\n                        <li><a [routerLink]=\\\"['/view']\\\"><b>View Employees</b></a></li>\\n                        <li><a [routerLink]=\\\"['/addemp']\\\"><b>Create Employee</b></a></li>\\n                      \\n                        <li><a [routerLink]=\\\"['/roles']\\\"> <b>User roles</b></a></li>\\n                      </ul>\\n                    </li>\\n                    <li class=\\\"dropdown\\\"><a class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" href=\\\"#\\\">Users \\n                        <span class=\\\"caret\\\"></span></a>\\n                  <ul class=\\\"dropdown-menu\\\">\\n                    \\n                    <li><a [routerLink]=\\\"['/login']\\\"><b>Login</b></a></li>\\n                    <li><a [routerLink]=\\\"['/register']\\\"><b>Register</b></a></li>\\n                  \\n                    <li><a [routerLink]=\\\"['/view']\\\"> <b>Manage Details</b></a></li>\\n                  </ul>\\n                </ul>\\n                <ul class=\\\"nav navbar-nav navbar-right\\\">\\n                    <li><a [routerLink]=\\\"['/login']\\\"><b><span class=\\\"glyphicon glyphicon-log-in\\\"></span> Login</b></a></li>\\n                  </ul>\\n                 \\n                </div>\\n              </nav>\\n                   <div>\\n                       <router-outlet></router-outlet>\\n                    </div>\\n             \\n        \\n            </div>\\n\\n\\n\\n            \\n                \"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl:'./app.component.html'\n\n  \n})\nexport class AppComponent {\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule ,ReactiveFormsModule} from '@angular/forms';\nimport { RouterModule} from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { UserComponent } from './users/users.component';\nimport { ViewComponent } from './view/view.component';\nimport { AddEmpComponent } from './addemp/addemp.component';\nimport { AdminService } from './services/admin.service';\nimport { RoleComponent } from './roles/role.component';\nimport { RegComponent } from './register/reg.component';\nimport { UpdateComponent } from './update/update.component';\nimport { NotFoundComponent } from './notfound.component';\n\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    LoginComponent,\n    AdminComponent,\n    UserComponent,\n    ViewComponent,\n    AddEmpComponent,\n    RoleComponent,\n    RegComponent,\n    UpdateComponent,\n    NotFoundComponent\n  \n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot([   \n                 {path: 'login', component:LoginComponent},\n                 {path: 'home', component:HomeComponent},\n                 {path: 'admin', component:AdminComponent},\n                 {path: 'users', component:UserComponent},\n                 {path: 'view', component:ViewComponent},\n                 {path: 'addemp', component:AddEmpComponent},\n                 {path: 'roles', component:RoleComponent},\n                 {path: 'register', component:RegComponent},\n                 {path: 'update', component:UpdateComponent},\n                 {path: '', redirectTo:'home', pathMatch:'full'},\n                 {path:'**', component:NotFoundComponent}\n  ]),\n  ],\n  bootstrap: [\n       AppComponent\n  ],\n  providers:[\n    AdminService\n  ]\n})\n\nexport class AppModule { }\n","export class MESSAGE{\n\n    public static update = 'Record Successfully updated..';\n    public static deleted = 'Record Successfully removed..';\n    \n    }","module.exports = \"<h1 style=\\\"color:green\\\" class=\\\"text-center\\\"> Home Page</h1>\\n\\n<div class=\\\"panel panel-success\\\">\\n        <div class=\\\"panel panel-heading\\\"><h2>Employee Management System</h2>\\n            <h3>Today's Date is {{Date | date:'shortDate'}}</h3>\\n        </div>\\n        <div class=\\\"panel panel-body text-center\\\">\\n                <img src=\\\"../assets/angular.jpg\\\" ><br>\\n                <h3>This is Angular6 Application</h3>\\n            <h2>Contains Admin and Users Modules</h2>\\n            <h3>Admin and users can login securely and can manage employees and roles</h3>\\n            \\n            </div>\\n        </div>\\n        \"","import { Component } from '@angular/core';\n\n@Component({\n  /*selector: 'home-comp',*/\n  templateUrl:'./home.component.html'\n  \n})\nexport class HomeComponent {\n\n  Date: number = Date.now();\n\n\n                   \n  \n}\n","module.exports = \"\\n     <h1 style=\\\"color:green\\\" class='text-center'>Login Page</h1>\\n     <div class=\\\"panel panel-success\\\">\\n         <div class=\\\"panel-heading\\\">\\n            <h3> Login Form</h3>\\n         </div>\\n        <div class=\\\"panel-body\\\">\\n        <form #form=\\\"ngForm\\\" novalidate (submit)=\\\"submitForm(form)\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\" [class.has-error]=\\\"firstname.invalid\\\">\\n                <label for='firstName' class=\\\"control-label\\\">FirstName</label>\\n                <input type=\\\"text\\\" \\n                       placeholder=\\\"firstName\\\" \\n                       name=\\\"firstName\\\"\\n                       id=\\\"firstName\\\"\\n                       required\\n                       class=\\\"form-control\\\"\\n                       [ngModel]=\\\"model.firstName\\\"\\n                       (ngModelChange)=\\\"fisrtToUpper($event)\\\"\\n                       #firstname=\\\"ngModel\\\"\\n                >\\n                <div class=\\\"alert alert-danger\\\" *ngIf = \\\"firstname.invalid\\\">\\n                     FirstName is Required\\n                </div>\\n                 \\n            </div>\\n        </div>\\n        </div>\\n       \\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\" [class.has-error]=\\\"password.invalid && password.touched\\\">\\n                    \\n                     <label for='password' class=\\\"control-label\\\">Password</label>\\n                     <input type=\\\"text\\\" \\n                            placeholder=\\\"password\\\" \\n                            name=\\\"password\\\"\\n                            id=\\\"password\\\"\\n                            required\\n                            class=\\\"form-control\\\"\\n                            minlength= 5\\n                            [(ngModel)]=\\\"model.password\\\"\\n                            #password=\\\"ngModel\\\"\\n                     >\\n                     <div class=\\\"alert alert-danger\\\" *ngIf = \\\"password.invalid && password.touched\\\">\\n                           Minimum length must be 5\\n                       </div>\\n                    \\n                </div>\\n            </div>\\n            </div>\\n            \\n                <button type=\\\"submit\\\" \\n                        class=\\\"btn btn-success\\\"\\n                        [disabled]=\\\"disableSubmit\\\"\\n                        (click)=\\\"onBack()\\\">\\n                        Submit\\n                </button>\\n        </form>\\n        </div>\\n     </div>\"","import { Component } from '@angular/core';\nimport { Login } from './login.model';\nimport {NgForm} from '@angular/forms';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport { FormGroup } from '../../../node_modules/@angular/forms';\n@Component({\n  /*selector: 'login-comp',*/\n  templateUrl:'./login.component.html'\n})\nexport class LoginComponent {\n   \n \n    constructor(private _route:ActivatedRoute,\n        private _router:Router,\n        ){}\n        \n    model = new Login('John','xxxxx'); \n    hasCodelangError= false;\n    disableSubmit = false;\n\n    fisrtToUpper(value: string): void{\n\n        if(value.length>0){\n            this.model.firstName = value.charAt(0).toUpperCase() + value.slice(1);\n\n        }\n        else{\n            this.model.firstName = value;\n        }\n    }\n    submitForm(form:NgForm){\n        console.log(form.value);\n\n    }\n    onBack(): void{\n        \n        this._router.navigate(['/view']);}\n    }\n\n","export class Login{\n\n    constructor(\n             public firstName= '',\n             public password= ''\n             \n             \n            ){}\n    \n    \n}","export class Employee{\n\n    constructor(\n             public userId: string,\n             public jobTitleName:string,\n             public firstName: string,\n             public lastName: string,\n             public preferredFullName: string,\n             public employeeCode: string,\n             public region: string,\n             public phoneNumber:number,\n             public emailAddress:string,\n             \n\n             \n\n\n\n    ){}\n    \n    \n}","export class employee{\n\n    constructor(\n             public firstName: string,\n             public lastName: string,\n             public email: string,\n             public password: string,\n             public gender: boolean,\n             public fullTime: string,\n             public codelang: string,\n\n    ){}\n}","import { Component} from '@angular/core';\n\n@Component({\n  template:`<div><h1>This is not found page 401</h1></div>`\n})\n\nexport class NotFoundComponent{\n    \n}","module.exports = \"<h1 style=\\\"color:green\\\" class='text-center'>Register User</h1>\\n<div class=\\\"panel panel-success\\\">\\n    <div class=\\\"panel-heading\\\">\\n       <b> Sign Up!</b>\\n    </div>\\n\\n    <div class=\\\"panel-body\\\">\\n        <form class=\\\"form-horizontal\\\"\\n              novalidate\\n              (ngSubmit)=\\\"save()\\\"\\n              [formGroup]=\\\"customerForm\\\">\\n            <fieldset>\\n                <div class=\\\"form-group\\\"\\n                    [ngClass]=\\\"{'has-error': (customerForm.get('firstName').touched || \\n                                              customerForm.get('firstName').dirty) &&\\n                                              !customerForm.get('firstName').valid }\\\">\\n                    <label class=\\\"col-md-2 control-label\\\" \\n                           for=\\\"firstNameId\\\">First Name</label>\\n\\n                    <div class=\\\"col-md-8\\\">\\n                        <input class=\\\"form-control\\\" \\n                               id=\\\"firstNameId\\\" \\n                               type=\\\"text\\\" \\n                               placeholder=\\\"First Name (required)\\\" \\n                               formControlName=\\\"firstName\\\"\\n                               (blur)=\\\"nameToUpper()\\\"/>\\n                        <span class=\\\"help-block\\\" *ngIf=\\\"(customerForm.get('firstName').touched ||\\n                                                         customerForm.get('firstName').dirty) &&\\n                                                         customerForm.get('firstName').errors\\\">\\n                                <span *ngIf=\\\"customerForm.get('firstName').errors.required\\\">\\n                                    Please enter first Name\\n                                </span>\\n                                <span *ngIf=\\\"customerForm.get('firstName').errors.minlength\\\">\\n                                    Min length should be 5\\n                                </span>\\n\\n                        </span>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\"\\n                    [ngClass]=\\\"{'has-error': (customerForm.get('lastName').touched || \\n                                              customerForm.get('lastName').dirty) &&\\n                                              !customerForm.get('lastName').valid }\\\">\\n                    <label class=\\\"col-md-2 control-label\\\" \\n                           for=\\\"flastNameId\\\">Last Name</label>\\n\\n                    <div class=\\\"col-md-8\\\">\\n                        <input class=\\\"form-control\\\" \\n                               id=\\\"lastNameId\\\" \\n                               type=\\\"text\\\" \\n                               placeholder=\\\"Last Name (required)\\\" \\n                               formControlName=\\\"lastName\\\"\\n                               />\\n                        <span class=\\\"help-block\\\" *ngIf=\\\"(customerForm.get('lastName').touched ||\\n                                                         customerForm.get('lastName').dirty) &&\\n                                                         customerForm.get('lastName').errors\\\">\\n                                <span *ngIf=\\\"customerForm.get('lastName').errors.required\\\">\\n                                    Please enter last Name\\n                                </span>\\n                                <span *ngIf=\\\"customerForm.get('lastName').errors.maxlength\\\">\\n                                    Max length should be 6\\n                                </span>\\n\\n                        </span>\\n                    </div>\\n                </div>\\n                <div formGroupName=\\\"emailGroup\\\"\\n                    [ngClass]=\\\"{'has-error': customerForm.get('emailGroup').errors}\\\">\\n<!----------------------------------------------------Email-------------------->\\n                    <div class=\\\"form-group\\\"\\n                        [ngClass]=\\\"{'has-error': (customerForm.get('emailGroup.email').touched || \\n                                                customerForm.get('emailGroup.email').dirty) &&\\n                                                !customerForm.get('emailGroup.email').valid }\\\">\\n                        <label class=\\\"col-md-2 control-label\\\" \\n                            for=\\\"femailId\\\">Email</label>\\n\\n                        <div class=\\\"col-md-8\\\">\\n                            <input class=\\\"form-control\\\" \\n                                id=\\\"emailId\\\" \\n                                type=\\\"text\\\" \\n                                placeholder=\\\"email (required)\\\" \\n                                formControlName=\\\"email\\\"/>\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(customerForm.get('emailGroup.email').touched ||\\n                                                            customerForm.get('emailGroup.email').dirty) &&\\n                                                            customerForm.get('emailGroup.email').errors\\\">\\n                                    <span *ngIf=\\\"customerForm.get('emailGroup.email').errors.required\\\">\\n                                        Please enter  email\\n                                    </span>\\n                                    <span *ngIf=\\\"customerForm.get('emailGroup.email').errors.pattern\\\">\\n                                        Please enter valid email\\n                                    </span>\\n\\n                            </span>\\n                        </div>\\n                     </div>\\n<!----------------------------------------------------Confirm Email-------------------->\\n                    <div class=\\\"form-group\\\"\\n                        [ngClass]=\\\"{'has-error': (customerForm.get('emailGroup.confrimEmail').touched || \\n                                            customerForm.get('emailGroup.confrimEmail').dirty) &&\\n                                            !customerForm.get('emailGroup.confrimEmail').valid }\\\">\\n                        <label class=\\\"col-md-2 control-label\\\" \\n                            for=\\\"confrimEmailId\\\">Confrim Email</label>\\n\\n                        <div class=\\\"col-md-8\\\">\\n                            <input class=\\\"form-control\\\" \\n                                id=\\\"confrimEmailId\\\" \\n                                type=\\\"text\\\" \\n                                placeholder=\\\"confrimEmail (required)\\\" \\n                                formControlName=\\\"confrimEmail\\\"/>\\n                            <span class=\\\"help-block\\\" *ngIf=\\\"(customerForm.get('emailGroup.confrimEmail').touched ||\\n                                                            customerForm.get('emailGroup.confrimEmail').dirty) &&\\n                                                            customerForm.get('emailGroup.confrimEmail').errors\\\">\\n                                    <span *ngIf=\\\"customerForm.get('emailGroup.confrimEmail').errors.required\\\">\\n                                        Please enter  confrimEmail\\n                                    </span>\\n                                    <span *ngIf=\\\"customerForm.get('emailGroup').errors.match\\\">\\n                                        Email doesnt match\\n                                    </span>\\n                            </span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\"\\n                     [ngClass]=\\\"{'has-error': (customerForm.get('phone').touched || \\n                                             customerForm.get('phone').dirty) &&\\n                                             !customerForm.get('phone').valid }\\\">\\n                     <label class=\\\"col-md-2 control-label\\\" \\n                         for=\\\"phoneId\\\">Phone</label>\\n\\n                     <div class=\\\"col-md-8\\\">\\n                         <input class=\\\"form-control\\\" \\n                             id=\\\"phoneId\\\" \\n                             type=\\\"text\\\" \\n                             placeholder=\\\"phone (required)\\\" \\n                             formControlName=\\\"phone\\\"/>\\n                         <span class=\\\"help-block\\\" *ngIf=\\\"(customerForm.get('phone').touched ||\\n                                                         customerForm.get('phone').dirty) &&\\n                                                         customerForm.get('phone').errors\\\">\\n                                 <span *ngIf=\\\"customerForm.get('phone').errors.required\\\">\\n                                     Please enter  phone\\n                                 </span>\\n\\n                         </span>\\n                     </div>\\n                  </div>\\n                  <div class=\\\"form-group\\\"\\n                     [ngClass]=\\\"{'has-error': (customerForm.get('rating').touched || \\n                                             customerForm.get('rating').dirty) &&\\n                                             !customerForm.get('rating').valid }\\\">\\n                     <label class=\\\"col-md-2 control-label\\\" \\n                         for=\\\"ratingId\\\">Rating</label>\\n\\n                     <div class=\\\"col-md-8\\\">\\n                         <input class=\\\"form-control\\\" \\n                             id=\\\"ratingId\\\" \\n                             type=\\\"text\\\" \\n                             placeholder=\\\"rating (required)\\\" \\n                             formControlName=\\\"rating\\\"/>\\n                         <span class=\\\"help-block\\\" *ngIf=\\\"(customerForm.get('rating').touched ||\\n                                                         customerForm.get('rating').dirty) &&\\n                                                         customerForm.get('rating').errors\\\">\\n                                 <span *ngIf=\\\"customerForm.get('rating').errors.range\\\">\\n                                     Please enter  rating between 1 to 5\\n                                 </span>\\n\\n                         </span>\\n                     </div>\\n                  </div>\\n                  <div class=\\\"form-group\\\">\\n                    <label class=\\\"col-md-2 control-label\\\">Send Notification</label>\\n\\n                    <div class=\\\"col-md-8\\\">\\n                        <label class=\\\"radio-inline\\\">\\n                            <input type=\\\"radio\\\" value=\\\"email\\\" \\n                                    formControlName=\\\"notification\\\"\\n                                    (click)=\\\"setNotfication('email')\\\">\\n                                Email\\n                        </label>\\n                        <label class=\\\"radio-inline\\\">\\n                            <input type=\\\"radio\\\" value=\\\"phone\\\" \\n                                    formControlName=\\\"notification\\\"\\n                                    (click)=\\\"setNotfication('phone')\\\">\\n                                Phone\\n                        </label>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"col-md-4 col-md-offset-2\\\">\\n                        <span>\\n                            <button class=\\\"btn btn-success\\\"\\n                                    type=\\\"submit\\\"\\n                                    [disabled]=\\\"!customerForm.valid\\\">\\n                                Save\\n                            </button>\\n                        </span>\\n                        &nbsp;&nbsp;\\n                        <span>\\n                            <button class=\\\"btn btn-success\\\"\\n                                    type=\\\"button\\\" (click)=\\\"populateData()\\\" >\\n                                Test Data\\n                            </button>\\n                        </span>\\n                        &nbsp;&nbsp;\\n                        <span>\\n                            <button class=\\\"btn btn-success\\\"\\n                                    type=\\\"reset\\\" >\\n                                Reset\\n                            </button>\\n                        </span>\\n                    </div>\\n                </div>\\n            </fieldset>\\n        </form>\\n    </div>\\n</div>\\n\"","import { Component, OnInit} from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder,\n         Validators,\n         ValidatorFn,\n         AbstractControl} from '@angular/forms';\n\nimport { Customer } from './reg.model';\n\nfunction ratingRange(min: number, max: number): ValidatorFn {\n    return (c: AbstractControl): {[key: string]: boolean} | null => {\n        if (c.value !== undefined && (isNaN(c.value) || c.value < min || c.value > max)) {\n            return{'range': true};\n        }\n        return null;\n    };\n}\n\nfunction emailMatcher(c: AbstractControl) {\n    const emailControl = c.get('email');\n    const confrimControl = c.get('confrimEmail');\n    if (emailControl.value === confrimControl.value) {\n        return null;\n    } else {\n        return {'match': true};\n    }\n}\n@Component({\n    selector: 'my-signup',\n    templateUrl: './reg.component.html'\n})\nexport class RegComponent implements OnInit  {\n    customerForm: FormGroup;\n\n    customer: Customer = new Customer();\n\n    constructor(private fb: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.customerForm = this.fb.group({\n            firstName: ['', [Validators.required, Validators.minLength(5)]],\n            lastName: ['', [Validators.required, Validators.maxLength(6)]],\n            emailGroup: this.fb.group({\n                email: ['', [Validators.required, Validators.pattern('^([a-zA-Z0-9]+)@([a-zA-Z0-9]+)\\.([a-zA-z]{2,5})$',)]],\n                confrimEmail: ['', [Validators.required]],\n            }, {validator: emailMatcher}),\n            phone: [],\n            notification : 'email',\n            rating: ['', ratingRange(1, 8)]\n        });\n    }\n    populateData(): void {\n        this.customerForm.patchValue({\n            firstName:'Saranya',\n            lastName:'Neralla',\n            email: 'a@a.com',\n            confirmEmail:'a@a.com',\n            phone:512333444,\n            rating:5\n        });\n    }\n\n    nameToUpper(): void {\n        const fname = this.customerForm.get('firstName').value;\n        this.customerForm.patchValue({\n            firstName: fname.charAt(0).toUpperCase() + fname.slice(1)\n        });\n    }\n\n    setNotfication(notifyVia: string): void {\n        console.log(notifyVia);\n        const phoneControl = this.customerForm.get('phone');\n        if (notifyVia === 'phone') {\n            phoneControl.setValidators(Validators.required);\n        } else {\n            phoneControl.clearValidators();\n        }\n\n        phoneControl.updateValueAndValidity();\n    }\n\n    save() {\n        console.log(this.customerForm);\n        console.log('Saved: ' + JSON.stringify(this.customerForm.value));\n    }\n }\n\n\n /*ngOnInit(): void {\n        this.customerForm = new FormGroup({\n            firstName: new FormControl(),\n            lastName: new FormControl()\n        });\n    }\n     populateData(): void {\n        this.customerForm.setValue({\n            firstName: 'John',\n            lastName: 'Methaw',\n            email: 'a@a.com'\n        });\n    }\n*/","export class Customer {\n\n    constructor(public firstName = '',\n        public lastName = '',\n        public email = '',\n        public sendCatalog = false,\n        public addressType = 'home'\n    ) { }\n}\n","module.exports = \"<h1 style=\\\"color:green\\\" class=\\\"text-center\\\"> Add New Role</h1>\\n\\n<div class=\\\"panel panel-success\\\">\\n        <div class=\\\"panel-heading\\\">\\n           <h3> New Role</h3>\\n        </div>\\n       <div class=\\\"panel-body\\\">\\n       <form #form=\\\"ngForm\\\" novalidate >\\n       <div class=\\\"row\\\">\\n           <div class=\\\"col-md-5\\\">\\n           <div class=\\\"form-group\\\"[class.has-error]=\\\"role.invalid && role.touched\\\" >\\n               <label for='role' class=\\\"control-label\\\">RoleTitle</label>\\n               <input type=\\\"text\\\" \\n                      placeholder=\\\"RoleTitle\\\" \\n                      name=\\\"role\\\"\\n                      id=\\\"role\\\"\\n                      required\\n                      class=\\\"form-control\\\"\\n                      [ngModel]=\\\"model.role\\\"\\n                      #role=\\\"ngModel\\\">\\n                      <div class=\\\"alert alert-danger\\\" *ngIf = \\\"role.invalid && role.touched\\\">\\n                            Role is Required\\n                       </div>\\n                      \\n               </div>\\n              </div>\\n              </div> \\n             <div class=\\\"row\\\">\\n               <div class=\\\"form-group\\\" >\\n                <div class=\\\"col-md-5\\\">\\n                 <label for='roledesc' class=\\\"control-label\\\">Role Desciption</label>\\n                 <input type=\\\"text\\\" \\n                        placeholder=\\\"Role Description\\\" \\n                        name=\\\"roledesc\\\"\\n                        id=\\\"roledesc\\\"\\n                        required\\n                        class=\\\"form-control\\\"\\n                        \\n                 >\\n                 \\n                </div>\\n            </div>\\n           </div><br>\\n           <button type=\\\"submit\\\" \\n           class=\\\"btn btn-success\\\" (click)=\\\"success()\\\">\\n           Submit\\n    </button>\\n           </form>\\n           </div>\\n         </div>   \"","import { Component } from '@angular/core';\nimport { Role } from './role.model';\n\n@Component({\n\n    templateUrl:'./role.component.html'\n\n})\nexport class RoleComponent{\n\n    model = new Role('','');\n    success():void{\n\n        if(this.model.role == null){\n            \n            alert(\"Please enter Role\");\n        }\n        alert(\"Role added successfully\");\n        \n    }\n        \n    \n}","export class Role{\n\n    constructor(\n             public role: string,\n             public roledesc: string,\n             \n             \n            ){}\n    \n    \n}","import { Injectable,EventEmitter} from '@angular/core';\nimport { Employee } from '../models/emp.model';\n\n@Injectable()\n\nexport class AdminService {\n\n  copyEvent=new EventEmitter<Employee>();\n  enableButton:boolean=false;\n  shareIndex: number;\n  showAlertMessage:boolean=false;\n  public alertMessage:string;\n\n    getEmployees:Employee[] =\n            [\n            {\n            'userId':'rirani',\n            'jobTitleName':'Developer',\n            'firstName':'Romin',\n            'lastName':'Irani',\n            'preferredFullName':'Romin Irani',\n            'employeeCode':'E1',\n            'region':'CA',\n            'phoneNumber':408-1234567,\n            'emailAddress':'romin.k.irani@gmail.com'\n            },\n            {\n            'userId':'nirani',\n            'jobTitleName':'Developer',\n            'firstName':'Neil',\n            'lastName':'Irani',\n            'preferredFullName':'Neil Irani',\n            'employeeCode':'E2',\n            'region':'CA',\n            'phoneNumber':408-1111111,\n            'emailAddress':'neilrirani@gmail.com'\n            },\n            {\n            'userId':'thanks',\n            'jobTitleName':'Program Directory',\n            'firstName':'Tom',\n            'lastName':'Hanks',\n            'preferredFullName':'Tom Hanks',\n            'employeeCode':'E3',\n            'region':'CA',\n            'phoneNumber':408-2222222,\n            'emailAddress':'tomhanks@gmail.com'\n            },\n            {\n                'userId':'jhon',\n                'jobTitleName':'Manager',\n                'firstName':'Jhon',\n                'lastName':'Dev',\n                'preferredFullName':'Jhon Dev',\n                'employeeCode':'E4',\n                'region':'CA',\n                'phoneNumber':408-2256722,\n                'emailAddress':'jhondev@gmail.com'\n            },\n             {\n                    'userId':'Andrew',\n                    'jobTitleName':'Tester',\n                    'firstName':'Andrew',\n                    'lastName':'Hanks',\n                    'preferredFullName':'Andrew Hanks',\n                    'employeeCode':'E5',\n                    'region':'CA',\n                    'phoneNumber':408-2222222,\n                    'emailAddress':'andrewhanks@gmail.com'\n             }\n\n    ]\n\n}\n\n","module.exports = \"<h1 style=\\\"color:green\\\" class='text-center'>Upadate Employee</h1>\\n     <div class=\\\"panel panel-success\\\">\\n         <div class=\\\"panel-heading\\\">\\n            <h3> Employee Form</h3>\\n         </div>\\n        <div class=\\\"panel-body\\\">\\n        <form #form=\\\"ngForm\\\" novalidate (submit)=\\\"submitForm(form)\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\" [class.has-error]=\\\"firstname.invalid\\\">\\n                <label for='firstName' class=\\\"control-label\\\">FirstName</label>\\n                <input type=\\\"text\\\" \\n                       placeholder=\\\"firstName\\\" \\n                       name=\\\"firstName\\\"\\n                       id=\\\"firstName\\\"\\n                       required\\n                       class=\\\"form-control\\\"\\n                       [ngModel]=\\\"model.firstName\\\"\\n                       (ngModelChange)=\\\"fisrtToUpper($event)\\\"\\n                       #firstname=\\\"ngModel\\\"\\n                >\\n                <div class=\\\"alert alert-danger\\\" *ngIf = \\\"firstname.invalid\\\">\\n                     FirstName is Required\\n                </div>\\n                 \\n            </div>\\n        </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"col-md-6\\\">\\n                 <label for='lasttName' class=\\\"control-label\\\">LastName</label>\\n                 <input type=\\\"text\\\" \\n                        placeholder=\\\"lastName\\\" \\n                        name=\\\"lasttName\\\"\\n                        id=\\\"lastName\\\"\\n                        class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"model.lastName\\\"\\n                 >\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n                <div class=\\\"col-md-6\\\">\\n                <div class=\\\"form-group\\\" [class.has-error]=\\\"email.invalid && email.touched\\\">\\n                    <label for='email' class=\\\"control-label\\\">Email</label>\\n                    <input type=\\\"text\\\" \\n                           placeholder=\\\"email\\\" \\n                           name=\\\"email\\\"\\n                           id=\\\"email\\\"\\n                           class=\\\"form-control\\\"\\n                           [(ngModel)]=\\\"model.email\\\"\\n                           pattern =\\\"^([a-zA-Z0-9]+)@([a-zA-Z0-9]+)\\\\.([a-zA-z]{2,5})$\\\"\\n                           #email=\\\"ngModel\\\"\\n                    >\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"email.invalid && email.touched\\\" >\\n                            Please enter valid pattern\\n                       </div>\\n                </div>\\n            </div>\\n                <div class=\\\"form-group\\\" [class.has-error]=\\\"password.invalid && password.touched\\\">\\n                    <div class=\\\"col-md-6\\\">\\n                     <label for='password' class=\\\"control-label\\\">Password</label>\\n                     <input type=\\\"password\\\" \\n                            placeholder=\\\"password\\\" \\n                            name=\\\"password\\\"\\n                            id=\\\"password\\\"\\n                            class=\\\"form-control\\\"\\n                            minlength= 5\\n                            [(ngModel)]=\\\"model.password\\\"\\n                            #password=\\\"ngModel\\\"\\n                     >\\n                     <div class=\\\"alert alert-danger\\\" *ngIf = \\\"password.invalid && password.touched\\\">\\n                           Minimum length must be 5\\n                       </div>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"radio\\\">\\n                <label>\\n                    <input type=\\\"radio\\\"\\n                            name=\\\"gender\\\"\\n                            value=\\\"female\\\"\\n                            [(ngModel)]=\\\"model.gender\\\">\\n                            Female\\n                </label>\\n            </div>\\n            <div class=\\\"radio\\\">\\n                    <label>\\n                        <input type=\\\"radio\\\"\\n                                name=\\\"gender\\\"\\n                                value=\\\"Male\\\"\\n                                [(ngModel)]=\\\"model.gender\\\">\\n                                Male\\n                    </label>\\n                </div>\\n                <div class=\\\"checkbox\\\">\\n                        <label>\\n                            <input type=\\\"checkbox\\\"\\n                                    name=\\\"fullTime\\\"\\n                                    [(ngModel)]=\\\"model.fullTime\\\" >\\n                    \\n                                    FullTime\\n                        </label>\\n                    </div>\\n                    <div class=\\\"form-group\\\" [class.has-error]=\\\"hasCodelangError\\\">\\n                        <label for=\\\"codelang\\\" class=\\\"control-label\\\">Codelang</label>\\n                        <select class=\\\"form-control\\\"\\n                                name=\\\"codelang\\\"\\n                                id=\\\"codelang\\\"\\n                                (blur)=\\\"validateCodeLang($event)\\\"\\n                                [(ngModel)]=\\\"model.codelang\\\">\\n                           <option value=\\\"default\\\">\\n                               Please Select Lang\\n                           </option>     \\n                           <option *ngFor=\\\"let lang of languages\\\">\\n                              {{ lang }}</option> \\n                           \\n                        </select>\\n                        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"hasCodelangError\\\">\\n                            Please Select Valid Input\\n                        </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-1\\\">\\n                <button type=\\\"submit\\\" \\n                        class=\\\"btn btn-success\\\"\\n                        [disabled]=\\\"disableSubmit\\\">\\n                        Save  \\n                </button></div>\\n                <div class=\\\"col-md-1\\\">\\n                <button type=\\\"submit\\\" \\n                        class=\\\"btn btn-success\\\"\\n                        (click)=\\\"GoToView()\\\">\\n                        View\\n                </button></div>\\n            </div>\\n        </form>\\n        </div>\\n     </div>\"","import { Component } from '@angular/core';\nimport {NgForm} from '@angular/forms';\nimport { employee } from '../models/employee.model';\nimport { Router } from '../../../node_modules/@angular/router';\n\n\n@Component({\n\n    templateUrl: 'update.component.html'\n\n})\nexport class UpdateComponent {\n    languages=['AngularJs','ReactJs','NodeJs'];\n    model = new employee('John','Methew','abc@aa.com','abcde',true,'Male','AngularJs');\n    hasCodelangError= false;\n    disableSubmit = false;\n    constructor(\n        private _router:Router) {}\n    fisrtToUpper(value: string): void{\n\n        if(value.length>0){\n            this.model.firstName = value.charAt(0).toUpperCase() + value.slice(1);\n\n        }\n        else{\n            this.model.firstName = value;\n        }\n    }\n    validateCodeLang(event): void{\n        if(this.model.codelang==='default'){\n            this.hasCodelangError= true;\n            this.disableSubmit= true;\n        }\n        else{\n            this.hasCodelangError= false;\n            this.disableSubmit= false;\n        }\n    }\n    \n    submitForm(form:NgForm){\n        console.log(form.value);\n        alert(\"The updated data is:  \"+JSON.stringify(form.value));\n    }\n    GoToView():void{\n\n        this._router.navigate(['/view']);\n\n    }\n}","module.exports = \"\"","import { Component } from '@angular/core';\n\n\n@Component({\n  /*selector: 'login-comp',*/\n  templateUrl:'./users.component.html'\n})\nexport class UserComponent {\n\n}","module.exports = \"<div class=\\\"panel panel-success\\\">\\n        <div class=\\\"panel panel-heading\\\"><h2>Employees List</h2></div>\\n        <div class=\\\"panel panel-body\\\">\\n            <div class=\\\"table-responsive\\\">\\n                <table class=\\\"table\\\">\\n                    <thead>\\n                       <tr class=\\\"center\\\">\\n                           <th>\\n                                userId \\n                           </th>\\n                           <th>jobTitleName</th>\\n                           <th>firstName</th>\\n                           <th>lastName</th>\\n                           <th >preferredFullName</th>\\n                           <th >employeeCode</th>\\n                           <th >region</th>\\n                           <th >phoneNumber</th>\\n                           <th >emailAddress</th>\\n    \\n    \\n    \\n                       </tr>\\n                    </thead>\\n                    <tbody class=\\\"center\\\">\\n                        <tr *ngFor=\\\"let emp of employees;let i=index\\\" >\\n                            <td>\\n                            {{emp.userId}}</td>\\n                            <td>{{emp.jobTitleName}}</td>\\n                           <td> {{emp.firstName}}</td>\\n                           <td>{{emp.lastName}}</td>\\n                           <td>{{emp.preferredFullName}}\\n                            </td>\\n                            <td>{{emp.employeeCode}}</td>\\n                            <td>{{emp.region}}</td>\\n                            <td>{{emp.phoneNumber}}</td>\\n                            <td>{{emp.emailAddress}}</td>\\n                            <td>\\n                                    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"update(emp,i)\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span></button></td>\\n                                   <td> <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"delete(i)\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span> </button>\\n                                \\n                                       \\n                                         \\n                                  </td>\\n                        </tr>\\n\\n    \\n                    </tbody>\\n                </table>\\n               \\n            </div>\\n        </div>\\n        </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Employee } from '../models/emp.model';\nimport { AdminService} from '../services/admin.service';\nimport { MESSAGE } from \"../constants/message\";\nimport { Router } from '../../../node_modules/@angular/router';\n\n\n@Component({\n \n  templateUrl:'./view.component.html'\n  \n})\nexport class ViewComponent  implements OnInit {\n\n employees:any[];\n constructor(private _adminService: AdminService,\n              private _router:Router) {}\n ngOnInit(): void{\n    this.employees = this._adminService.getEmployees;\n }\n update(passedEmployee:Employee,index){\n   \n    this._adminService.enableButton=true;\n    this._adminService.shareIndex = index;\n    this._adminService.copyEvent.emit(passedEmployee);\n    \n    console.log(\"Previos data::\"+JSON.stringify(passedEmployee));\n    alert(\"Previos data::\"+JSON.stringify(passedEmployee));\n    this._router.navigate(['/update']);\n  }\n\n  delete(index){\n    this._adminService.getEmployees.splice(index, 1);\n    alert(\"Record successfully deleted \");\n    this._adminService.alertMessage=MESSAGE.deleted \n   }\n                   \n  \n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}